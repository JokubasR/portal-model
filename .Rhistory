X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:6e7, 800000),
ia = c(sample(1:5e7, 1:6e7), 1:6e7),
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(800000, 1:6e7),
ia = c(sample(1:5e7, 1:6e7), 1:6e7),
dimension =c(800000L, 20000L))
sample(800000, 1:6e7)
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:800000, 6e7),
ia = c(sample(1:5e7, 6e7), 6e7),
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:800000, 6e7),
ia = c(sample(1:80000L, 5e7), 6e7),
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:800000, 6e7),
ia = c(sample(1:800000, 5e7), 6e7),
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:800000, 6e7),
ia = c(sample(1:800000, 5e4), 6e7),
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:800000, 6e7, T),
ia = c(sample(1:800000, 5e4), 6e7),
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:800000, 6e7, T),
ia = as.interger(c(sample(1L:800000L, 5e4), 6e7)),
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:800000, 6e7, T),
ia = as.integer(c(sample(1L:800000L, 5e4), 6e7)),
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:20000, 6e7, T),
ia = as.integer(c(sample(1:800000, 6e7))),
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:20000, 6e7, T),
ia = as.integer(c(sample(1:800000, 6e7, T))),
dimension =c(800000L, 20000L))
sort(as.integer(c(sample(1:800000, 6e7, T))))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:20000, 6e7, T),
ia = sort(as.integer(c(sample(1:800000, 6e7, T)))),
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:20000, 6e7, T),
ia = sort(sort(sample(1:800000, 50000)))))),
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:20000, 6e7, T),
ia = sort(sort(sample(1:800000, 50000))),
dimension =c(800000L, 20000L))
6e7+1L
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:20000, 6e7, T),
ia = c(sort(sort(sample(1:800000, 50000))),6e7+1L),
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:20000, 6e7, T),
ia = as.integer(c(sort(sort(sample(1:800000, 50000))),6e7+1L)),
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:20000, 6e7, T),
ia = as.integer(c(sort(sort(sample(1:6e7, 50000))),6e7+1L)),
dimension =c(800000L, 20000L))
as.integer(c(sort(sort(sample(1:6e7, 50000))),6e7+1L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:20000, 6e7, T),
ia = as.integer(c(sort(unique(sample(1:6e7, 50000))),6e7+1L)),
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:20000, 6e7, T),
ia = as.integer(c(sort(unique(sample(1:6e7, 5000))),6e7+1L)),
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:20000, 6e7, T),
ia = as.integer(c(sort(unique(sample(1:6e7, 5000))),6e7+1L))[-1],
dimension =c(800000L, 20000L))
6e7
ia = as.integer(sort(unique(c(sample(1:6e7, 800000),6e7+1L))))[-1],
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:20000, 6e7, T),
ia = as.integer(sort(unique(c(sample(1:6e7, 800000),6e7+1L))))[-1],
dimension =c(800000L, 20000L))
X <- new("matrix.csr", ra = rep(1, 6e7),
ja = sample(1:20000, 6e7, T),
ia = as.integer(sort(unique(c(sample(1:6e7, 800000),6e7+1L))))[-1],
dimension =c(800000L, 20000L))
i <- sample(1:20000, 6e7, F)
j <- sample(1:800000, 6e7, F)
i <- sample(1:20000, 6e7, T)
j <- sample(1:800000, 6e7, T)
?matrix.csr
?Matrix
set.seed(19)
sparseMatrix(i=sample(1:20000, 6e7, T),
j=sample(1:800000, 6e7, T),
x=rep(1, 6e7))
x <- sparseMatrix(i=sample(1:20000, 6e7, T),
j=sample(1:800000, 6e7, T),
x=rep(1, 6e7))
x <- sparseMatrix(i=sample(1:800000, 6e7, T),
j=sample(1:20000, 6e7, T),
x=rep(1, 6e7))
MatrixToSparseM <- function(X){
X.csc <- new("matrix.csc", ra = X@x,
ja = X@i + 1L,
ia = X@p + 1L,
dimension = X@Dim)
as.matrix.csr(X.csc)
}
MatrixToSparseM <- function(X){
X.csc <- new("matrix.csc", ra = X@x,
ja = X@i + 1L,
ia = X@p + 1L,
dimension = X@Dim)
as.matrix.csr(X.csc)
}
x <- MatrixToSparseM(x)
rbinom(10, 1, 0.1)
set.seed(19)
x <- sparseMatrix(i=sample(1:800000, 6e7, T),
j=sample(1:20000, 6e7, T),
y <- rbinom(6e7, 1, 0.1)
x=rep(1, 6e7))
MatrixToSparseM <- function(X){
X.csc <- new("matrix.csc", ra = X@x,
ja = X@i + 1L,
ia = X@p + 1L,
dimension = X@Dim)
y <- rbinom(6e7, 1, 0.1)
x <- sparseMatrix(i=sample(1:800000, 6e7, T),
set.seed(19)
x <- sparseMatrix(i=sample(1:800000, 6e7, T),
j=sample(1:20000, 6e7, T),
x=rep(1, 6e7))
y <- rbinom(6e7, 1, 0.1)
MatrixToSparseM <- function(X){
X.csc <- new("matrix.csc", ra = X@x,
ja = X@i + 1L,
ia = X@p + 1L,
dimension = X@Dim)
as.matrix.csr(X.csc)
}
x <- MatrixToSparseM(x)
fit <- LiblineaR(x, y, type=6)
nrow(x)
set.seed(19)
x <- sparseMatrix(i=sample(1:800000, 6e7, T),
j=sample(1:20000, 6e7, T),
x=rep(1, 6e7))
y <- rbinom(800000, 1, 0.1)
x <- MatrixToSparseM(x)
fit <- LiblineaR(x, y, type=6)
fit <- LiblineaR(x[1:100000,], y[1:100000], type=6)
fit <- LiblineaR(x[1:10000,], y[1:10000], type=6)
fit <- LiblineaR(x[1:1000,], y[1:1000], type=6)
fit <- LiblineaR(x[,1:1000], y, type=6)
fit <- LiblineaR(x[,1:100], y, type=6)
fit <- LiblineaR(x[,1:10], y, type=6)
colSums(x)
x <- sparseMatrix(i=sample(1:800000, 6e7, T),
j=sample(1:20000, 6e7, T),
x=rep(1, 6e7))
rm(list=ls())
library(SparseM)
library(Matrix)
set.seed(19)
x <- sparseMatrix(i=sample(1:800000, 6e7, T),
j=sample(1:20000, 6e7, T),
x=rep(1, 6e7))
y <- rbinom(800000, 1, 0.1)
x <- sparseMatrix(i=sample(1:800000, 5e7, T),
j=sample(1:20000, 5e7, T),
x=rep(1, 6e7))
set.seed(19)
x <- sparseMatrix(i=sample(1:800000, 5e7, T),
j=sample(1:20000, 5e7, T),
x=rep(1, 5e7))
y <- rbinom(800000, 1, 0.1)
MatrixToSparseM <- function(X){
X.csc <- new("matrix.csc", ra = X@x,
ja = X@i + 1L,
ia = X@p + 1L,
dimension = X@Dim)
as.matrix.csr(X.csc)
}
x <- MatrixToSparseM(x)
fit <- LiblineaR(x, y, type=6)
x <- sparseMatrix(i=sample(1:800000, 5e6, T),
j=sample(1:20000, 5e6, T),
x=rep(1, 5e7))
set.seed(19)
x <- sparseMatrix(i=sample(1:800000, 5e6, T),
j=sample(1:20000, 5e6, T),
x=rep(1, 5e6))
y <- rbinom(800000, 1, 0.1)
MatrixToSparseM <- function(X){
X.csc <- new("matrix.csc", ra = X@x,
ja = X@i + 1L,
ia = X@p + 1L,
dimension = X@Dim)
as.matrix.csr(X.csc)
}
x <- MatrixToSparseM(x)
fit <- LiblineaR(x, y, type=6)
x <- sparseMatrix(i=sample(1:800000, 5e5, T),
j=sample(1:20000, 5e5, T),
x=rep(1, 5e5))
y <- rbinom(800000, 1, 0.1)
MatrixToSparseM <- function(X){
X.csc <- new("matrix.csc", ra = X@x,
ja = X@i + 1L,
ia = X@p + 1L,
dimension = X@Dim)
as.matrix.csr(X.csc)
}
x <- MatrixToSparseM(x)
fit <- LiblineaR(x, y, type=6)
x <- sparseMatrix(i=sample(1:800000, 1e5, T),
j=sample(1:20000, 1e5, T),
x=rep(1, 1e5))
fit <- LiblineaR(x, y, type=6)
x <- MatrixToSparseM(x)
fit <- LiblineaR(x, y, type=6)
x <- sparseMatrix(i=sample(1:800000, 1e5, T),
j=sample(1:20000, 1e5, T),
x=rep(1, 1e5))
colSums(x)
?writeClipboard
glmnet
lognet
library(data.table)
?data.table
?fread
fread("lead_optimizer/features.csv")
d <- fread("lead_optimizer/features.csv")
d <- fread("lead_optimizer/features.csv", select=1)
d
d <- fread("lead_optimizer/features.csv", select=2)
d
detach("package:data.table", unload=TRUE)
install.packages("~/Desktop/datatable/www/data.table_1.8.11.zip", repos = NULL)
library(data.table)
install.packages("ff")
library(ff)
read.csv.ffdf
?read.csv.ffdf
FFDF <- read.csv.ffdf("~/Desktop/aruno ad hoc/merged_DKDEFIITNOSECZ_clicks.csv")
FFDF <- read.csv.ffdf("~/Desktop/aruno ad hoc/merged_DKDEFIITNOSECZ_clicks.csv", nrows=1000)
FFDF <- read.csv.ffdf("~/Desktop/aruno ad hoc/merged_DKDEFIITNOSECZ_clicks.csv", nrows=100)
read.csv.ffdf
?read.csv.ffdf
FFDF <- read.csv.ffdf(file="~/Desktop/aruno ad hoc/merged_DKDEFIITNOSECZ_clicks.csv")
library(Rcpp)
?cppFunction
cppFunction(
'int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}')
library(slidify)
cppFunction(
'int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}')
install.packages("Rcpp")
cppFunction(
'int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}')
libarary(Rcpp)
library(Rcpp)
cppFunction(
'int fibonacci(const int x) {
if (x == 0) return(0);
if (x == 1) return(1);
return (fibonacci(x - 1)) + fibonacci(x - 2);
}')
Rcpp::ready()
d <- fread("~/Desktop/R/modelResults/ornelai_7414.csv")
library(data.table)
d <- fread("~/Desktop/R/modelResults/ornelai_7414.csv")
d
View(d)
aggregate(lead ~ CplTargetId)
aggregate(lead ~ CplTargetId, d)
d[, sum(lead), by=c("Placement")]
tit <- as.data.frame(Titanic)
t
tit
d[, nrow(.SD), by=c("Placement","lead")]
fq <- d[, nrow(.SD), by=c("Placement","lead")]
alluvial( fq[,1:2], freq=fq$V1, xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white",
layer = tit2d$Survived != "Yes" )
library(alluvial)
alluvial( fq[,1:2], freq=fq$V1, xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white",
layer = tit2d$Survived != "Yes" )
alluvial( fq[,1:2], freq=fq$V1, xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white",
layer = fq$V1 != 1 )
?alluvial
alluvial( fq[,1:2], freq=fq$V1, xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white")
alluvial( fq[,1:2,with=F], freq=fq$V1, xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white")
alluvial( fq[,1:2], freq=fq$V1, xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white",
layer = fq$V1 != 1)
alluvial( fq[,1:2,with=F], freq=fq$V1, xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white",
layer = fq$V1 != 1)
fq
fq[,V1]
fq[,V1>100]
alluvial( fq[V1>100,1:2,with=F], freq=fq$V1, xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white",
layer = fq$V1[fq$V1>100] != 1)
fq[V1>100,1:2,with=F]
fq
fq[V1>100,1:2,with=F]
alluvial( fq[V1>100,1:2,with=F], freq=fq$V1[fq$V1>100], xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white",
layer = fq$V1[fq$V1>100] != 1)
th <- 1000
alluvial( fq[V1>th,1:2,with=F], freq=fq$V1[fq$V1>th], xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white",
layer = fq$V1[fq$V1>th] != 1)
names(d)
th <- 1000
alluvial( fq[V1>th,1:(ncol(fq)-1),with=F], freq=fq$V1[fq$V1>th], xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white",
layer = fq$V1[fq$V1>th] != 1)
fq <- d[, nrow(.SD), by=c("Placement","InventorySourceId"  ,"lead")]
th <- 1000
alluvial( fq[V1>th,1:(ncol(fq)-1),with=F], freq=fq$V1[fq$V1>th], xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white",
layer = fq$V1[fq$V1>th] != 1)
fq
fq[V1>th,1:(ncol(fq)-1),with=F]
alluvial( fq[V1>th,1:(ncol(fq)-1),with=F], freq=fq$V1[fq$V1>th], xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white",
layer = fq$V1[fq$V1>th] != 1)
fq[,1:4]
alluvial( fq[,1:2,with=F], freq=fq$V1, border=NA,
hide = fq$V1 < quantile(fq$V1, .50),
col=ifelse( fq$lead == 1, "red", "gray"))
fq <- d[, nrow(.SD), by=c("Placement","InventorySourceId"  ,"lead")]
alluvial( fq[,1:2,with=F], freq=fq$V1, border=NA,
hide = fq$V1 < quantile(fq$V1, .50),
col=ifelse( fq$lead == 1, "red", "gray"))
fq
alluvial( fq[,1:3,with=F], freq=fq$V1, border=NA,
hide = fq$V1 < quantile(fq$V1, .50),
col=ifelse( fq$lead == 1, "red", "gray"))
fq[,1:3,with=F]
quantile(fq$V1, .50)
ifelse( fq$lead == 1, "red", "gray")
alluvial( fq[,1:3,with=F], freq=fq$V1, border=NA,
hide = fq$V1 < quantile(fq$V1, .50),
col=ifelse( fq$lead == 1, "red", "gray"))
fq[,1:3,with=F]
alluvial( fq[,1:3,with=F], freq=fq$V1, border=NA,
hide = fq$V1 < quantile(fq$V1, .50),
col=ifelse( fq$lead == 1, "red", "gray"))
quantile(fq$V1, .50)
alluvial( fq[V1>th,1:(ncol(fq)-1),with=F], freq=fq$V1[fq$V1>th], xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white",
layer = fq$V1[fq$V1>th] != 1)
fq <- d[, nrow(.SD), by=c("Placement","InventorySourceId"  ,"lead")]
subset(fq, V1>0)
fq <- subset(fq, V1>0)
alluvial( fq[V1>th,1:(ncol(fq)-1),with=F], freq=fq$V1[fq$V1>th], xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white",
layer = fq$V1[fq$V1>th] != 1)
alluvial( fq[,1:(ncol(fq)-1),with=F], freq=fq$V1, xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white",
layer = fq$V1 != 1)
alluvial( fq[,1:(ncol(fq)-1),with=F], freq=fq$V1, xw=0.0, alpha=0.8,
gap.width=0.1, col= "steelblue", border="white")
tit <- as.data.frame(Titanic)
alluvial( tit[,1:4], freq=tit$Freq, border=NA,
hide = tit$Freq < quantile(tit$Freq, .50),
col=ifelse( tit$Survived == "No", "red", "gray") )
fq[,1:3,with=F]
alluvial(fq[,1:3,with=F], freq=fq$V1)
fq$v1
fq$V1
unique(fq$V1)
lapply(fq, unique)
alluvial(fq[,1:3,with=F], freq=fq$V1)
alluvial(data.frame(fq[,1:3,with=F]), freq=fq$V1)
subset(fq, V1>100)
fq <- subset(fq, V1>100)
alluvial(data.frame(fq[,1:3,with=F]), freq=fq$V1)
fq
fq <- subset(fq, V1>200)
alluvial(data.frame(fq[,1:3,with=F]), freq=fq$V1)
fq <- subset(fq, V1>300)
alluvial(data.frame(fq[,1:3,with=F]), freq=fq$V1)
fq
fq <- subset(fq, V1>1000)
alluvial(data.frame(fq[,1:3,with=F]), freq=fq$V1)
fq
alluvial(data.frame(fq[,c(1,3),with=F]), freq=fq$V1)
gsub("\\N", "idk", fq$InventorySourceId)
gsub("\\\N", "idk", fq$InventorySourceId)
gsub("\\\\N", "idk", fq$InventorySourceId)
fq$InventorySourceId <- gsub("\\\\N", "idk", fq$InventorySourceId)
alluvial(data.frame(fq[,c(1,3),with=F]), freq=fq$V1)
alluvial(data.frame(fq[,c(1:3),with=F]), freq=fq$V1)
fq
tit
alluvial(data.frame(fq[,c(1:3),with=F]), freq=fq$V1)
debugonce(alluvial)
alluvial(data.frame(fq[,c(1:3),with=F]), freq=fq$V1)
fq
tmp <- fq
tmp$InventorySourceId
alluvial(data.frame(tmp[,c(1:3),with=F]), freq=tmp$V1)
alluvial(data.frame(tmp[,c(1:3),with=F]), freq=tmp$V1)
tit
alluvial( tit[,1:4], freq=tit$Freq, border=NA,
hide = tit$Freq < quantile(tit$Freq, .50),
col=ifelse( tit$Survived == "No", "red", "gray") )
alluvial( tit[,1:3], freq=tit$Freq, border=NA,
hide = tit$Freq < quantile(tit$Freq, .50),
col=ifelse( tit$Survived == "No", "red", "gray") )
alluvial( tit[,1:2], freq=tit$Freq, border=NA,
hide = tit$Freq < quantile(tit$Freq, .50),
col=ifelse( tit$Survived == "No", "red", "gray") )
alluvial( tit[,1:4], freq=tit$Freq, border=NA,
hide = tit$Freq < quantile(tit$Freq, .50),
col=ifelse( tit$Survived == "No", "red", "gray") )
alluvial(data.frame(tmp[,c(1:3),with=F]), freq=tmp$V1)
debug(getp)
debug(alluvial::getp)
debug(alluvial)
alluvial(data.frame(tmp[,c(1:3),with=F]), freq=tmp$V1)
setwd("~/projects/portal-model")
d <- fread("data/DelfiComments.csv", sep="asdasdasfa")
d <- fread("data/DelfiComments.csv", sep="~")
d <- fread("data/DelfiComments.csv", sep="\n")
readLines("data/DelfiComments.csv")
lines <- readLines("data/DelfiComments.csv")
lines[1]
lines[2]
lapply(lines, function(x)substr(x, 0, 5))
sapply(lines, function(x)substr(x, 0, 5))=="Delfi"
which(sapply(lines, function(x)substr(x, 0, 5))=="Delfi")
index <- which(sapply(lines, function(x)substr(x, 0, 5))=="Delfi")
index[1]
d <- fread("data/comments.csv")
d <- read.csv("data/comments.csv")
View(d)
grep("Vienodai kalti", d$CommentText)
d[524,]
View(d[524,])
d
d$CommentText
d <- read.csv("data/comments.csv", stringsAsFactors=F)
d <- data.table(d)
d$CommentText
install.packages("tm")
library(tm)
Vignette(tm)
vignette(tm)
library(tm)
vignette(tm)
vignette("tm")
d$CommentText
vs <- VectorSource(d$CommentText, "utf-8")
vs
summary(vs)
vs <- tm_map(tm_map(vs, stripWhitespace), tolower)
vs <- tm_map(vs, stripWhitespace)
cp <- Corpus(VectorSource(d$CommentText, "utf-8"))
summary(cp)
tm_map(cp, stripWhitespace)
vs <- tm_map(tm_map(cp, stripWhitespace), tolower)
?stemDocument
vs
dtm <- DocumentTermMatrix(vs)
dim(dtm)
dtm$v
?DocumentTermMatrix
dtm <- DocumentTermMatrix(vs,
control = list(removePunctuation = TRUE))
dimnames(dtm)
View(colnames(dtm))
View(d$CommentText)
str(cp)
cp[[1]]
cp[[2]]
View(cp[[2]])
?removePunctuation
Sys.setlocale(locale="lithuanian")
"ąčę"
ąčę
